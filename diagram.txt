@startuml

class "ExamPart" {
  id : Long
  title : String
  content : String
  type : Type
  parent : ExamPart
  childs : List<ExamPart>
}

class "Question" {
  score : Double
  answer : ExamPart
  alternatives() : List<ExamPart>
}

class "ExamRandomBuilder" {
  totalQuestions : Integer
  from(List<ExamPart>, BuildExamPartSpecification) : List<PostulantQuestion>
}

class "BuildExamPartSpecification" {
  title : String
  examPartType : Type
  number : int
  childs : List<BuildExamPartSpecification>
  title(String) : BuildExamPartSpecification
  addChild(BuildExamPartSpecification) : BuildExamPartSpecification
  findExamParts(List<ExamPart>) : List<ExamPart>
}

class "ExamEvent" {
  id : Long
  description : String
  range : DateTimeRange
  hasStarted() : boolean
  hasEnded() : boolean
}

class "PostulantExam" {
  id : Long
  postulant : Postulant
  event : ExamEvent
  actualRange : DateTimeRange
  questions : List<PostulantQuestion>
  finish()
  assertHasNotEnded()
}

class "PostulantQuestion" {
  postulantExam : PostulantExam
  postulantAnswer : ExamPart
  alternativeReferences : List<ExamPartReference>
  getAlternative(Long) : Optional<ExamPart>
  updateAnswer(Long)
}

class "ExamPartReference" {
  id : Long
  examPart : ExamPart
  number : Integer
}

class "Postulant" {
  firstName : String
  lastName : String
  motherLastName : String
  programCode : String
  upgCode : String
  start(ExamEvent, List<PostulantQuestion>) : PostulantExam
  isTaker(Optional<PostulantExam>) : boolean
}

"ExamPart" <|-- "Question"
"ExamPartReference" <|-- "PostulantQuestion"
"ExamPart" <-> "ExamPart" : parent
"Question" --> "ExamPart" : answer
"BuildExamPartSpecification" --> "*" "BuildExamPartSpecification" : childs
"PostulantExam" --> "Postulant" : postulant
"PostulantExam" --> "ExamEvent" : event
"PostulantExam" <-> "*" "PostulantQuestion" : questions
"PostulantQuestion" --> "ExamPart" : postulantAnswer
"PostulantQuestion" --> "*" "ExamPartReference" : alternativeReferences
"ExamPartReference" --> "ExamPart" : examPart

@enduml
